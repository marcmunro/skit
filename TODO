Architectural re-work

When a cyclic dependency is detected, we will apply ddl to the node to
see if it will result in no code being generated.  If so, the node can
be deactivated.


Working on the following ddl code changes in order to allow ownership
changes and consolidate ddl standards.

MODIFY 


general code layout for:

tables.xsl
constraints.xsl
indices.xsl
triggers.xsl
rules.xsl
views.xsl
fallback.xsl


diff tests for:
sequences.xsl   - (Change sequence next value)
tables.xsl
constraints.xsl
indices.xsl
triggers.xsl
rules.xsl
views.xsl
fallback.xsl


tablespace privs (taking into account implicit privs on default tablespace) for:

tables.xsl
constraints.xsl
indices.xsl




diffs:
    sequences (including the concat thing)
    tables (including the concat thing)
    constraints (including the concat thing)
    indices (including the concat thing)
    rules (including the concat thing)
    views (including the concat thing)
    triggers (including the concat thing)

Add handling for FDWs and any other 8.4 things
Add handling for sequence owned by table.column


generate:
  - ensure vertical spacing is good in code generated for diffs
    (actually, for all code)

allow non-superusers to run skit

shout option for ddl (ie upper case)

deps optimisations:
  - When there are fallbacks on both sides but there do not need to be,
    deactivate the fallback and dsendfallback leaving only the
    dsfallback and endfallback.
  - Figure out how to handle auto-dropping of dependent objects (eg
    grant of select on a table when the role or table is dropped).
  - We should optimise the dropping of dependent objects when their
    dependency is dropped.  Eg grants on object when object is dropped.


smart tsort:
    new tsort function
    change name of tsort selection from simple_tsort to fast_tsort

make the echoes option functional in generate 
change name of ignore-contexts option in generate

grep

Others
  Allow handling of a lack of priv by commenting out the code.  This
  probably also requires deps to be marked as temporary or transient or
  some such.

  Allow an as-user opton.

Bugs and Issues:

  Cannot manipulate roles which are superusers if we are not a superuser.
  This seems to need dependency-sets which are conditional on the
  activation or existence of fallback nodes.  We need to make this as
  general a solution as possible, and we must recheck such conditional
  dependency-sets when activating fallback nodes.
  Example scripts in error_example.sql

  Need to consider how to deal with automatically named constraints.

  Figure out how to give useful error messages when we do not have the
  necessary priv for an operation.  To do this we may need the concept
  of a temporary dependency (one that only needs to exist for the
  duration of the build/drop/diff actions, and not subsequently. 

  Allow nodes to be dependent on alternate parents (eg for cluster
  objects such as roles, tablespaces, etc)?

  Identify any issues/new features raised in DEPS.txt


docs:
    man page
    user guide
    doxygen
    developers guide

9.0 changes
9.1 changes
9.2 changes
9.3 changes



REFACTORINGS
Remove as many attributes as possible from the dbobject element.
Particularly role_name, table_name and qname.  Move any needed fields
into the actual dbobject (eg table, role, view) objects.
