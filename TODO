
Check that acls are handled properly (returning null if that's what they
  contain, in all of the sql files.
    conversions		yes
    schemata		yes
    cluster		n/a
    database		yes
    types		n/a
    functions		yes
    domains		n/a
    casts		n/a
    operators		n/a
    operator_classes	n/a
    operator_families	n/a
    aggregates		n/a
    sequences		TODO
    tables		TODO
    views		TODO
    constraints		TODO
    rules		TODO
    triggers		TODO
    indices		TODO


Check handling of all existing ownership diffs - are they being handled
in a manner consistent with conversions?
    conversions		yes
    schemata		yes
    cluster		n/a
    database		yes
    types		n/a
    functions		yes
    aggregates		yes
    casts		n/a
    operators		yes
    operator_classes	yes
    operator_families	yes
    basetypes		yes
    composite types	TODO
    domains		TODO
    sequences		TODO
    tables		TODO
    views		TODO
    constraints		TODO
    rules		TODO
    triggers		TODO
    indices		TODO


Do the concat thing for objects below as in done in generate for
schemata (in ddl)

diffs:
    domains (including the concat thing)
    sequences (including the concat thing)
    tables (including the concat thing)
    constraints (including the concat thing)
    indices (including the concat thing)
    rules (including the concat thing)
    views (including the concat thing)
    triggers (including the concat thing)

Add handling for FDWs and any other 8.4 things

generate:
  - Add echoes code to all database objects
  - ensure vertical spacing is good in code generated for diffs
    (actually, for all code)
  - eliminate QQQ commented lines in ddl/*.xsl

smart tsort:
    new tsort function
    change name of tsort selection from simple_tsort to fast_tsort

make the echoes option functional in generate 
change name of ignore-contexts option in generate

grep

docs:
    man page
    user guide
    doxygen
    developers guide

9.0 changes
9.1 changes
9.2 changes
9.3 changes


The FBDROP and FBBUILD redirectActionTypes in deps.c are nasty hacks.
Although they *may* be safe they should be replaced with something more
elegant.  What may be needed is a separation of the fallback nodes into
fallback and drop-side fallback variants.  Each of these would be
created when resolving the appropriate DAG (forwards or backwards).

