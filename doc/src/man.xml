<!-- doc/src/man.xml -->

<appendix id="man">
  <title><application>skit</application> man page</title>
<refentry id="manpage">
  <refmeta>
    <refentrytitle><application>skit</application></refentrytitle>
    <manvolnum>1</manvolnum>
    <refmiscinfo>Application</refmiscinfo>
  </refmeta>

  <refnamediv>
    <refname><application>skit</application></refname>
    <refpurpose>
      Database development management tool
    </refpurpose>
  </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
    <command>skit</command>
    <group rep="repeat">
      <!-- dbtype -->
      <arg>
	<group choice="plain">
	  <arg choice="plain">--db</arg>
	  <arg choice="plain">--dbtype</arg>
	</group>
	<arg>=</arg>
	<replaceable class="parameter">dbtype-name</replaceable>
      </arg>

	<!-- extract -->
	<sbr/>
	<arg>
	  <group choice="plain">
	    <arg choice="plain">-e</arg>
	    <arg choice="plain">--extract</arg>
	  </group>
	  <arg> 
	    <group choice="plain">
	      <arg choice="plain">--db</arg>
	      <arg choice="plain">--dbtype</arg>
	    </group>
	    <arg>=</arg>
	    <replaceable class="parameter">dbtype-name</replaceable>
	  </arg>

	  <arg>
	    <group choice="plain">
	      <arg choice="plain">-c</arg>
	      <arg choice="plain">--connect</arg>
	    </group>
	    <arg>=</arg>
	    <replaceable class="parameter">connection-string</replaceable>
	  </arg>
	  <arg>
	    <group choice="plain">
	      <arg choice="plain">-d</arg>
	      <arg choice="plain">--database</arg>
	    </group>
	    <arg>=</arg>
	    <replaceable class="parameter">database-name</replaceable>
	  </arg>
	  <arg>
	    <group choice="plain">
	      <arg choice="plain">-h</arg>
	      <arg choice="plain">--host</arg>
	    </group>
	    <arg>=</arg>
	    <replaceable class="parameter">hostname</replaceable>
	  </arg>
	  <arg>
	    <group choice="plain">
	      <arg choice="plain">-p</arg>
		<arg choice="plain">--port</arg>
	    </group>
	    <arg>=</arg>
	    <replaceable class="parameter">port-number</replaceable>
	  </arg>
	  <arg>
	    <group choice="plain">
	      <arg choice="plain">-u</arg>
	      <arg choice="plain">--username</arg>
	    </group>
	    <arg>=</arg>
	    <replaceable class="parameter">username</replaceable>
	  </arg>
	  <arg>
	    <group choice="plain">
	      <arg choice="plain">-p</arg>
	      <arg choice="plain">--password</arg>
	    </group>
	    <arg>=</arg>
	    <replaceable class="parameter">password</replaceable>
	  </arg>
	</arg>

	<!-- scatter -->
	<sbr/>
	<arg choice="plain">
	  <group>
	    <arg choice="plain">-s</arg>
	    <arg choice="plain">--scatter</arg>
	  </group>
	  <arg> 
	    <group choice="plain">
	      <arg choice="plain">-o</arg>
	      <arg choice="plain">--path</arg>
	    </group>
	    <arg>=</arg>
	    <replaceable class="parameter">directory-name</replaceable>
	  </arg>
	  <arg> 
	    <group choice="plain">
	      <arg choice="plain">-v</arg>
	      <arg choice="plain">--verbose</arg>
	    </group>
	  </arg>
	  <arg> 
	    <group choice="plain">
	      <arg choice="plain">--ch</arg>
	      <arg choice="plain">--checkonly</arg>
	    </group>
	  </arg>
	  <arg> 
	    <group choice="plain">
	      <arg choice="plain">-q</arg>
	      <arg choice="plain">--quiet</arg>
	      <arg choice="plain">--si</arg>
	      <arg choice="plain">--silent</arg>
	    </group>
	  </arg>
	  <arg><option>filename</option></arg>
	</arg>

	<!-- diff -->
	<sbr/>
	<arg choice="plain">
	  <group>
	    <arg choice="plain">-d</arg>
	    <arg choice="plain">--diff</arg>
	  </group>
	  <arg> 
	    <group choice="plain">
	      <arg choice="plain">-s</arg>
	      <arg choice="plain">--swap</arg>
	    </group>
	  </arg>
	  <arg>
	    <option>filename1</option>
	    <arg>
	      <option>filename2</option>
	    </arg>
	  </arg>
	</arg>

	<!-- generate -->
	<sbr/>
	<arg choice="plain">
	  <group>
	    <arg choice="plain">-g</arg>
	    <arg choice="plain">-n</arg>
	    <arg choice="plain">--generate</arg>
	  </group>
	  <arg> 
	    <group choice="plain">
	      <arg choice="plain">-b</arg>
	      <arg choice="plain">--build</arg>
	    </group>
	  </arg>
	  <arg> 
	    <group choice="plain">
	      <arg choice="plain">-d</arg>
	      <arg choice="plain">--drop</arg>
	    </group>
	  </arg>
	  <arg> 
	    <group choice="plain">
	      <arg choice="plain">--de</arg>
	      <arg choice="plain">--debug</arg>
	    </group>
	  </arg>
	  <arg><option>filename</option></arg>
	</arg>


	<!-- list -->
	<sbr/>
	<arg choice="plain">
	  <group>
	    <arg choice="plain">-l</arg>
	    <arg choice="plain">--list</arg>
	  </group>
	  <arg> 
	    <group choice="plain">
	      <arg choice="plain">--gra</arg>
	      <arg choice="plain">--grants</arg>
	    </group>
	  </arg>
	  <arg> 
	    <group choice="plain">
	      <arg choice="plain">-c</arg>
	      <arg choice="plain">--contexts</arg>
	    </group>
	  </arg>
	  <arg> 
	    <group choice="plain">
	      <arg choice="plain">-f</arg>
	      <arg choice="plain">--fallbacks</arg>
	    </group>
	  </arg>
	  <arg> 
	    <group choice="plain">
	      <arg choice="plain">-a</arg>
	      <arg choice="plain">--all</arg>
	    </group>
	  </arg>
	  <arg><option>filename</option></arg>
	</arg>

	<!-- adddeps -->
	<sbr/>
	<arg choice="plain">
	  <group>
	    <arg choice="plain">-a</arg>
	    <arg choice="plain">--adddeps</arg>
	  </group>
	  <arg><option>filename</option></arg>
	</arg>

	<!-- template -->
	<sbr/>
	<arg choice="plain">
	  <group>
	    <arg choice="plain">-t</arg>
	    <arg choice="plain">--template</arg>
	  </group>
	  <option>filename</option>
	  <group rep="repeat">
	    <arg choice="plain">optional-args</arg>
	    <arg><option>optional-parameters</option></arg>
	  </group>
	</arg>

	<!-- print -->
	<sbr/>
	<arg choice="plain">
	  <group choice="plain">
	    <arg>
	      <group>
		<arg choice="plain">-p</arg>
		<arg choice="plain">--print</arg>
	      </group>
	      <arg>
		<group>
		  <arg choice="plain">-x</arg>
		  <arg choice="plain">--xml</arg>
		</group>
	      </arg>
	      <arg>
		<group>
		  <arg choice="plain">-d</arg>
		  <arg choice="plain">--full</arg>
		</group>
	      </arg>
	    </arg>
	    <arg>
	      <group>
		<arg choice="plain">-f</arg>
		<arg choice="plain">--pf</arg>
		<arg choice="plain">--printfull</arg>
	      </group>
	    </arg>
	    <arg>
	      <group>
		<arg choice="plain">-x</arg>
		<arg choice="plain">--px</arg>
		<arg choice="plain">--printxml</arg>
	      </group>
	    </arg>
	  </group>
	  <arg><option>filename</option></arg>
	</arg>

	<!-- help -->
	<sbr/>
	<arg choice="plain">
	  <group choice="plain">
	    <arg>
	      <group>
		<arg choice="plain">-h</arg>
		<arg choice="plain">--help</arg>
		<arg choice="plain">-u</arg>
		<arg choice="plain">--usage</arg>
	      </group>
	    </arg>
	  </group>
	</arg>

	<!-- version -->
	<sbr/>
	<arg choice="plain">
	  <group choice="plain">
	    <arg>
	      <group>
		<arg choice="plain">-v</arg>
		<arg choice="plain">--version</arg>
	      </group>
	    </arg>
	  </group>
	</arg>
      </group>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>
    <para>
     <application>skit</application> is a command-line tool that enables
     you to: capture the definition of a database in an
     <acronym>XML</acronym> file or a directory hierarchy of such files;
     generate the <acronym>SQL</acronym> to rebuild a database; compare
     databases; and generate the <acronym>SQL</acronym> to bring one
     database into line with another.
    </para>
    <para>
      Its primary purpose is to allow database development to be managed
      with industry-standard Source Code Management tools.
    </para>
    <para>
      Each primary option causes a specific skit command to be executed,
      with options and parameters.  Each such command may add or remove
      <acronym>XML</acronym> streams from
      <application>skit</application>&apos;s internal stack, This stack
      allows <application>skit</application> commands to be
      <quote>pipelined</quote>, passing the results of one command into
      the next.  If skit terminates with exactly one
      <acronym>XML</acronym> stream left on the stack, an implicit
      <command>print</command> command is issued.
    </para>
 </refsect1>

 <refsect1>
  <title>Options</title>

  <variablelist>
    <varlistentry>
      <term><arg choice="plain">--db</arg></term>
      <term><arg choice="plain">--dbtype</arg></term>
      <listitem>
	<para>
	  Specify the type of database to which we will connect.  This
	  governs the search path used by the
	  <application>skit</application> engine for finding the
	  appropriate version of the templates that will drive the
	  extract operation.  This defaults to <quote>postgres</quote>.
	</para>
      </listitem>
    </varlistentry>

    <!-- extract -->
    <varlistentry>
      <term><arg choice="plain">-e</arg></term>
      <term><arg choice="plain">--extract</arg></term>
      <listitem>

	<variablelist>
	  <varlistentry>
	    <term><arg choice="plain">--db</arg></term>
	    <term><arg choice="plain">--dbtype</arg></term>
	    <listitem>
	      <para>
		This is the same as the outermost dbtype option.
	      </para>
	    </listitem>
	  </varlistentry>

  	<varlistentry>
  	  <term><arg choice="plain">-c</arg></term>
  	  <term><arg choice="plain">--connect</arg></term>
  	  <listitem>
  	    <para>
  	      Specify a database connection string.  This may be
  	      provided instead of all of the individual details like
  	      database name, host, etc.
  	    </para>
  	  </listitem>
  	</varlistentry>

  	<varlistentry>
  	  <term><arg choice="plain">-d</arg></term>
  	  <term><arg choice="plain">--database</arg></term>
  	  <listitem>
  	    <para>
  	      Specify the name of the database to which we will connect.
  	      This can be provided instead of the connect option, or as
  	      well as.  If both are provided the database name is
  	      appended to whatever value was given for connect.
  	    </para>
  	  </listitem>
  	</varlistentry>

  	<varlistentry>
  	  <term><arg choice="plain">-h</arg></term>
  	  <term><arg choice="plain">--hostname</arg></term>
  	  <listitem>
  	    <para>
  	      Specify the hostname for the database server to which we
  	      will connect.  This may be a server name or an ip address.
  	      This can be provided instead of the connect option, or as
  	      well as.  If both are provided the database name is
  	      appended to whatever value was given for connect.
  	    </para>
  	  </listitem>
  	</varlistentry>

  	<varlistentry>
  	  <term><arg choice="plain">-p</arg></term>
  	  <term><arg choice="plain">--port</arg></term>
  	  <listitem>
  	    <para>
  	      Specify the port to which we will connect.  This can be
  	      provided instead of the connect option, or as well as.  If
  	      both are provided the database name is appended to
  	      whatever value was given for connect.
  	    </para>
  	  </listitem>
  	</varlistentry>

  	<varlistentry>
  	  <term><arg choice="plain">-u</arg></term>
  	  <term><arg choice="plain">--username</arg></term>
  	  <listitem>
  	    <para>
  	      Specify the username to be used for the database
  	      connection.  This can be provided instead of the connect
  	      option, or as well as.  If both are provided the database
  	      name is appended to whatever value was given for connect.
  	      Note that <application>postgres</application> allows the
  	      username to default to the connected user, so this
  	      parameter is entirely optional.
  	    </para>
  	  </listitem>
  	</varlistentry>

  	<varlistentry>
  	  <term><arg choice="plain">--pass</arg></term>
  	  <term><arg choice="plain">--password</arg></term>
  	  <listitem>
  	    <para>
  	      Specify the password to be used for the database
  	      connection.  This can be provided instead of the connect
  	      option, or as well as.  If both are provided the database
  	      name is appended to whatever value was given for connect.
  	      Note that <application>postgres</application> allows some
  	      users to connect without passwords, so this parameter is
  	      entirely optional.
  	    </para>
  	  </listitem>
  	</varlistentry>
        </variablelist>
      <para>
	Connect to the specified database and generate an
	<acronym>XML</acronym> stream describing each database object.
      </para>
      </listitem>
    </varlistentry>

    <!-- scatter -->
    <varlistentry>
      <term><arg choice="plain">-s</arg></term>
      <term><arg choice="plain">--scatter</arg></term>
      <listitem>
	<variablelist>
	  <varlistentry>
	    <term><arg choice="plain">-v</arg></term>
	    <term><arg choice="plain">--verbose</arg></term>
	    <listitem>
	      <para>
		Print, to the <acronym>XML</acronym> print stream,
		summary data for <emphasis>all</emphasis> files rather
		than just those that have been changed.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><arg choice="plain">--ch</arg></term>
	    <term><arg choice="plain">--checkonly</arg></term>
	    <listitem>
	      <para>
		Produce only the <acronym>XML</acronym> print stream,
		IE do not write any output files.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><arg choice="plain">-q</arg></term>
	    <term><arg choice="plain">--quiet</arg></term>
	    <term><arg choice="plain">--si</arg></term>
	    <term><arg choice="plain">--silent</arg></term>
	    <listitem>
	      <para>
		Do not print summary data to the output stream.  These
		flags take precedence over the <option>verbose</option>
		flags.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
	<para>
	  Scatters the contents of an <acronym>XML</acronym> stream into
	  a directory tree with one file per major database object.  The
	  resulting directory hierarchy is suitable for inclusion into a
	  repository managed by a Source Code Management
	  (<acronym>SCM</acronym>) system.
	</para>
	<para>
	  The rootmost entry of the scattered directory tree is always
	  called <filename>cluster.xml</filename>.  If this file is
	  provided a parameter to any <application>skit</application>
	  command, the entire directory tree will be read.  IE, for
	  <application>skit</application>&apos;s purposes there is no
	  difference between a file containing an <acronym>XML</acronym>
	  stream, and the root file of a scattered directory tree.
	</para>
	<para>
	  If a filename is provided to this command, the file will be
	  read and added to the stack.
	</para>
	<note>
	  <para>
	    Unless one of the <option>quiet</option> flags is provided,
	    an <acronym>XML</acronym> print stream will be generated
	    which will provide a summary of files created and/or modified.
	  </para>
	</note>
      </listitem>
    </varlistentry>

    <!-- diff -->
    <varlistentry>
      <term><arg choice="plain">-d</arg></term>
      <term><arg choice="plain">--diff</arg></term>
      <listitem>
	<variablelist>
	  <varlistentry>
	    <term><arg choice="plain">-s</arg></term>
	    <term><arg choice="plain">--swap</arg></term>
	    <listitem>
	      <para>
		Invert the order of the two input streams.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
	<para>
	  Takes two input streams and performs a diff on them, creating
	  an <acronym>XML</acronym> diff stream which can (and should)
	  bepassed to the <application>skit</application>
	  <command>generate</command> command.
	</para>
	<para>
	  If filenames are provided to this command, the file(s) will be
	  read and added to the stack before processing.
	</para>
      </listitem>
    </varlistentry>

    <!-- generate -->
    <varlistentry>
      <term><arg choice="plain">-g</arg></term>
      <term><arg choice="plain">-n</arg></term>
      <term><arg choice="plain">--generate</arg></term>
      <listitem>
	<variablelist>
	  <varlistentry>
	    <term><arg choice="plain">-d</arg></term>
	    <term><arg choice="plain">--drop</arg></term>
	    <listitem>
	      <para>
		Generate <acronym>DDL</acronym> statements to drop all
		objects in the source stream.
	      </para>
	      <note>
		<para>
		  If the source stream is a diff stream, this flag is
		  ignored.
		</para>
	      </note>
	    </listitem>
	  </varlistentry>
	</variablelist>
	<variablelist>
	  <varlistentry>
	    <term><arg choice="plain">-b</arg></term>
	    <term><arg choice="plain">--build</arg></term>
	    <listitem>
	      <para>
		Generate <acronym>DDL</acronym> statements to build all
		objects in the source stream.  This can be combined with
		<option>--drop</option> to create a script that drops
		and then rebuilds the database.  This is the default
		option for the
		<application>skit</application><command>generate</command>
		command so does not need to be provided.
	      </para>
	      <note>
		<para>
		  If the source stream is a diff stream, this flag is
		  ignored.
		</para>
	      </note>
	    </listitem>
	  </varlistentry>
	</variablelist>
	<variablelist>
	  <varlistentry>
	    <term><arg choice="plain">--de</arg></term>
	    <term><arg choice="plain">--debug</arg></term>
	    <listitem>
	      <para>
		This causes the raw <acronym>XML</acronym> produced by
		the skit:tsort action to be written to stdout.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
	<para>
	  Takes an input stream and generates <acronym>DDL</acronym> to
	  create, build or drop a database.  If the input is a diff
	  stream (from the <application>skit</application>
	  <command>diff</command> command, generate
	  <acronym>DDL</acronym> to bring the one database into line 
	  with the other. 
	</para>
	<para>
	  The <acronym>DDL</acronym> is generated an an
	  <acronym>XML</acronym> print stream which can be printed as
	  text using the <application>skit</application>
	  <command>print</command> command.
	</para>
	<para>
	  The output is in the form of an executable shell script,
	  though this may change in future versions.  You should not
	  execute this script directly, but should examine it carefully
	  to ensure that it does what you expect.
	</para>
      </listitem>
    </varlistentry>

    <!-- list -->
    <varlistentry>
      <term><arg choice="plain">-l</arg></term>
      <term><arg choice="plain">--list</arg></term>
      <listitem>
	<variablelist>
	  <varlistentry>
	    <term><arg choice="plain">--gra</arg></term>
	    <term><arg choice="plain">--grants</arg></term>
	    <listitem>
	      <para>
		Add details of grants to the list output.  By default
		grants are not shown because they are considered
		generally uninteresting. 
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><arg choice="plain">-c</arg></term>
	    <term><arg choice="plain">--contexts</arg></term>
	    <listitem>
	      <para>
		Add details of contexts to the list output.  Contexts 
		are relevant only when <command>list</command> is run
		on a stream created by <command>generate</command>.
		Context entries show where the generated script switches
		the effective user before performing an operation, ie
		the context describes the user that performs
		<acronym>DDL</acronym> operations. 
	      </para>
	      <para>
		By default context is not shown because it is an
		artefact of the generated <acronym>DDL</acronym>
		script and not part of the resulting database.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><arg choice="plain">-f</arg></term>
	    <term><arg choice="plain">--fallbacks</arg></term>
	    <listitem>
	      <para>
		Add details of fallbacks to the list output.  Fallbacks
		are relevant only when <command>list</command> is run
		on a stream created by <command>generate</command>.
		Fallback entries show where the generated script
		temporarily provides extra privileges to a role  before
		performing an operation. 
	      </para>
	      <para>
		By default fallbacks are not shown because they are
		artefacts of the generated <acronym>DDL</acronym>
		script and not part of the resulting database.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
	<para>
	  Takes an input stream and generates an <acronym>XML</acronym>
	  print stream, which summarises its contents.  The source
	  stream can be a stream produced by <command>extract</command>,
	  <command>diff</command>, or <command>generate</command>.
	</para>
	<para>
	  If a filename is provided to this command, the file will be
	  read and added to the stack before processing.
	</para>
      </listitem>
    </varlistentry>

    <!-- adddeps-->
    <varlistentry>
      <term><arg choice="plain">-a</arg></term>
      <term><arg choice="plain">--adddeps</arg></term>
      <listitem>
	<para>
	  Takes an <acronym>XML</acronym> stream as created by
	  <command>extract</command> and wraps each database object in
	  <tag>&lt;dbobject&gt;</tag> elements containing dependency and
	  context information. This is normally an operation that is
	  performed automatically when XML streams are read. This
	  command is intended for use primarily for debugging skit. The
	  dependency elements added by this command are used by the
	  generate command in order to properly order the DDL produced.
	</para>
	<para>
	  If the input stream already contains
	  <tag>&lt;dbobject&gt;</tag> elements, this command leave the
	  <acronym>XML</acronym> stream unaffected.
	</para>
	<para>
	  If a filename is provided to this command, the file will be
	  read and added to the stack before processing.
	</para>
	<note>
	  <para>
	    By default, the <command>print</command> performs a remove
	    deps operation before producing output so if you want to see
	    the transformation created by this command, you will need to
	    use the <option>--full</option> of <command>print</command>.
	  </para>
	</note>
      </listitem>
    </varlistentry>

    <!-- template -->
    <varlistentry>
      <term><arg choice="plain">-t</arg></term>
      <term><arg choice="plain">--template</arg></term>
      <listitem>
	<para>
	  This command evaluates a skit <acronym>XML</acronym> template
	  file.  Such template files can perform any action of which
	  skit is capable, including reading from databases.
	</para>
	<para>
	  This command is actually the basis for almost all of
	  <application>skit</application>&apos;s built-in commands, and
	  the following shell commands are entirely equivalent:
	  <programlisting>
$ <application>skit</application> --generate --build mydb.xml

$ <application>skit</application> --template generate.xml --build mydb.xml
	  </programlisting>
	</para>
      </listitem>
    </varlistentry>

    <!-- print -->
    <varlistentry>
      <term><arg choice="plain">-p</arg></term>
      <term><arg choice="plain">--print</arg></term>
      <listitem>
	<variablelist>
	  <varlistentry>
	    <term><arg choice="plain">-x</arg></term>
	    <term><arg choice="plain">--xml</arg></term>
	    <listitem>
	      <para>
		Print the output as a pure <acronym>XML</acronym> stream
		without interpretation.  This is only useful for
		examining the contents of print streams.  Applying this
		option to any other sort of <acronym>XML</acronym>
		stream will have no effect.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><arg choice="plain">-f</arg></term>
	    <term><arg choice="plain">--full</arg></term>
	    <listitem>
	      <para>
		Print the output as a pure <acronym>XML</acronym>
		stream and also leave any <tag>&lt;dbobject&gt;</tag>
		elements added by <command>adddeps</command> commands,
		in place.  Note that for diff streams
		<tag>&lt;dbobject&gt;</tag> elements are always left in
		place, so this option will have no effect.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
	<para>
	  Print an <acronym>XML</acronym> stream to standard output.  By
	  default, the stream is interpreted allowing print streams to
	  be printed as pure text.
	</para>
	<para>
	  If a filename is provided to this command, the file will be
	  read and added to the stack before processing.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><arg choice="plain">-pf</arg></term>
      <term><arg choice="plain">--printfull</arg></term>
      <listitem>
	<para>
	  As <option>--print --full</option>.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><arg choice="plain">-x</arg></term>
      <term><arg choice="plain">--px</arg></term>
      <term><arg choice="plain">--printxml</arg></term>
      <listitem>
	<para>
	  As <option>--print --xml</option>.
	</para>
      </listitem>
    </varlistentry>

    <!-- help -->
    <varlistentry>
      <term><arg choice="plain">-h</arg></term>
      <term><arg choice="plain">--help</arg></term>
      <term><arg choice="plain">-u</arg></term>
      <term><arg choice="plain">--usage</arg></term>
      <listitem>
	<para>
	  Provide a simple help message.
	</para>
      </listitem>
    </varlistentry>
	
    <!-- version -->
    <varlistentry>
      <term><arg choice="plain">-v</arg></term>
      <term><arg choice="plain">--version</arg></term>
      <listitem>
	<para>
	  Provide the version number of the
	  <application>skit</application> application.
	</para>
      </listitem>
    </varlistentry>
	
  </variablelist>
 </refsect1>


 <refsect1>
  <title>Exit Status</title>

  <para>
   <application>skit</application> returns 0 to the shell if it
   finished normally.  
  </para>
 </refsect1>

 <refsect1>
  <title>Supported Databases</title>

  <para>
   <application>Skit</application> currently supports the PostgreSQL
   <acronym>RDBMS</acronym>, versions 8.4 to 9.4.
  </para>
 </refsect1>

</refentry>
</appendix>