<!-- doc/src/man.xml -->

<appendix id="man">
  <title><application>skit</application> man page</title>
  <refentry id="manpage">
    <refmeta>
      <refentrytitle><application>skit</application></refentrytitle>
      <manvolnum>1</manvolnum>
      <refmiscinfo>Application</refmiscinfo>
    </refmeta>
    
    <refnamediv>
      <refname><application>skit</application></refname>
      <refpurpose>
	Database development management tool
      </refpurpose>
    </refnamediv>
    
    <refsynopsisdiv>
      <cmdsynopsis>
	<command>skit</command>
	<group rep="repeat">
	  <!-- dbtype -->
	  <arg>
	    <group choice="plain">
	      <arg choice="plain">--db</arg>
	      <arg choice="plain">--dbtype</arg>
	    </group>
	    <arg>=</arg>
	    <replaceable class="parameter">dbtype-name</replaceable>
	  </arg>
	  
	  <sbr/>
	  <arg>
	    &extract_command;
	  </arg>

	  <sbr/>
	  <arg>
	    &scatter_command;
	  </arg>
	  
	  <sbr/>
	  <arg>
	    &diff_command;
	  </arg>
	  
	  <sbr/>
	  <arg>
	    &generate_command;
	  </arg>
	  
	  <sbr/>
	  <arg>
	    &list_command;
	  </arg>
	  
	  <sbr/>
	  <arg>
	    &adddeps_command;
	  </arg>
	  
	  <sbr/>
	  <arg>
	    &template_command;
	  </arg>
	  
	  <sbr/>
	  <arg>
	  </arg>
	  
	  <!-- usage -->
	  <sbr/>
	  <arg choice="plain">
	    <group choice="plain">
	      <arg choice="plain">
		<group>
		  <arg choice="plain">-h</arg>
		  <arg choice="plain">--help</arg>
		  <arg choice="plain">-u</arg>
		  <arg choice="plain">--usage</arg>
		</group>
	      </arg>
	      <group>
		<arg choice="plain">
		  --<replaceable class="option">long-optionname</replaceable>
		</arg>
		<arg choice="plain">
		  -<replaceable class="opyion">short-optionname</replaceable>
		</arg>
	      </group>
	    </group>
	  </arg>
	  
	  <!-- version -->
	  <sbr/>
	  <arg choice="plain">
	    <group choice="plain">
	      <arg choice="plain">
		<group>
		  <arg choice="plain">-v</arg>
		  <arg choice="plain">--version</arg>
		</group>
	      </arg>
	    </group>
	  </arg>
	</group>
      </cmdsynopsis>
    </refsynopsisdiv>
    
    <refsect1>
      <title>Description</title>
      <para>
	<application>skit</application> is a command-line tool that
	enables you to: capture the definition of a database in an
	<acronym>XML</acronym> file or a directory hierarchy of such
	files; generate the <acronym>SQL</acronym> to rebuild a database;
	compare databases; and generate the <acronym>SQL</acronym> to
	bring one database into line with another.
      </para>
      <para>
	Its primary purpose is to allow database development to be managed
	with industry-standard Source Code Management tools.
      </para>
      <para>
	Each primary option causes a specific skit command to be executed,
	with options and parameters.  Each such command may add or remove
	<acronym>XML</acronym> streams from
	<application>skit</application>&apos;s internal stack, This stack
	allows <application>skit</application> commands to be
	<quote>pipelined</quote>, passing the results of one command into
	the next.  If skit terminates with exactly one
	<acronym>XML</acronym> stream left on the stack, an implicit
	<command>print</command> command is issued.
      </para>
    </refsect1>
    
    <refsect1>
      <title>Options</title>
      
      <variablelist>
	<varlistentry>
	  <term><arg choice="plain">--db</arg></term>
	  <term><arg choice="plain">--dbtype</arg></term>
	  <listitem>
	    &dbtype_synopsis;
	  </listitem>
	</varlistentry>
	
	<!-- extract -->
	<varlistentry>
	  <term><arg choice="plain">-e</arg></term>
	  <term><arg choice="plain">--extract</arg></term>
	  <listitem>
	    &extract_options;
	    <para>
	      Connect to the specified database and generate an
	      <acronym>XML</acronym> stream describing each database
	      object.
	    </para>
	    
	  </listitem>
	</varlistentry>
	
	<!-- scatter -->
	<varlistentry>
	  <term><arg choice="plain">-s</arg></term>
	  <term><arg choice="plain">--scatter</arg></term>
	  <listitem>
	    &scatter_options;
	    <para>
	      Scatters the contents of an <acronym>XML</acronym> stream into
	      a directory tree with one file per major database object.  The
	      resulting directory hierarchy is suitable for inclusion into a
	      repository managed by a Source Code Management
	      (<acronym>SCM</acronym>) system.
	    </para>
	    <para>
	      The rootmost entry of the scattered directory tree is always
	      called <filename>cluster.xml</filename>.  If this file is
	      provided a parameter to any <application>skit</application>
	      command, the entire directory tree will be read.  IE, for
	      <application>skit</application>&apos;s purposes there is no
	      difference between a file containing an <acronym>XML</acronym>
	      stream, and the root file of a scattered directory tree.
	    </para>
	    <para>
	      If a filename is provided to this command, the file will be
	      read and added to the stack.
	    </para>
	    <note>
	      <para>
		Unless one of the <option>quiet</option> flags is provided,
		an <acronym>XML</acronym> print stream will be generated
		which will provide a summary of files created and/or modified.
	      </para>
	    </note>
	  </listitem>
	</varlistentry>
	
	<!-- diff -->
	<varlistentry>
	  <term><arg choice="plain">-d</arg></term>
	  <term><arg choice="plain">--diff</arg></term>
	  <listitem>
	    &diff_options;
	    <para>
	      Takes two input streams and performs a diff on them, creating
	      an <acronym>XML</acronym> diff stream which can (and should)
	      be passed to the <application>skit</application>
	      <command>generate</command> command.
	    </para>
	    <para>
	      If filenames are provided to this command, the file(s) will be
	      read and added to the stack before processing.
	    </para>
	  </listitem>
	</varlistentry>
	
	<!-- generate -->
	<varlistentry>
	  <term><arg choice="plain">-g</arg></term>
	  <term><arg choice="plain">-n</arg></term>
	  <term><arg choice="plain">--generate</arg></term>
	  <listitem>
	    &generate_options;
	    <para>
	      Takes an input stream and generates <acronym>DDL</acronym> to
	      create, build or drop a database.  If the input is a diff
	      stream (from the <application>skit</application>
	      <command>diff</command> command, generate
	      <acronym>DDL</acronym> to bring the one database into line 
	      with the other. 
	    </para>
	    <para>
	      The <acronym>DDL</acronym> is generated an an
	      <acronym>XML</acronym> print stream which can be printed as
	      text using the <application>skit</application>
	      <command>print</command> command.
	    </para>
	    <para>
	      The output is in the form of an executable shell script,
	      though this may change in future versions.  You should not
	      execute this script directly, but should examine it carefully
	      to ensure that it does what you expect.
	    </para>
	  </listitem>
	</varlistentry>
	
	<!-- list -->
	<varlistentry>
	  <term><arg choice="plain">-l</arg></term>
	  <term><arg choice="plain">--list</arg></term>
	  <listitem>
	    &list_options;
	    <para>
	      Takes an input stream and generates an <acronym>XML</acronym>
	      print stream, which summarises its contents.  The source
	      stream can be a stream produced by <command>extract</command>,
	      <command>diff</command>, or <command>generate</command>.
	    </para>
	    <para>
	      If a filename is provided to this command, the file will be
	      read and added to the stack before processing.
	    </para>
	  </listitem>
	</varlistentry>
	
	<!-- adddeps-->
	<varlistentry>
	  <term><arg choice="plain">-a</arg></term>
	  <term><arg choice="plain">--adddeps</arg></term>
	  <listitem>
	    <para>
	      Takes an <acronym>XML</acronym> stream as created by
	      <command>extract</command> and wraps each database object in
	      <tag>&lt;dbobject&gt;</tag> elements containing dependency and
	      context information. This is normally an operation that is
	      performed automatically when XML streams are read. This
	      command is intended for use primarily for debugging skit. The
	      dependency elements added by this command are used by the
	      generate command in order to properly order the DDL produced.
	    </para>
	    <para>
	      If the input stream already contains
	      <tag>&lt;dbobject&gt;</tag> elements, this command leave the
	      <acronym>XML</acronym> stream unaffected.
	    </para>
	    <para>
	      If a filename is provided to this command, the file will be
	      read and added to the stack before processing.
	    </para>
	    <note>
	      <para>
		By default, the <command>print</command> performs a remove
		deps operation before producing output so if you want to see
		the transformation created by this command, you will need to
		use the <option>--full</option> of <command>print</command>.
	      </para>
	    </note>
	  </listitem>
	</varlistentry>
	
	<!-- template -->
	<varlistentry>
	  <term><arg choice="plain">-t</arg></term>
	  <term><arg choice="plain">--template</arg></term>
	  <listitem>
	    <para>
	      This command evaluates a skit <acronym>XML</acronym> template
	      file.  Such template files can perform any action of which
	      skit is capable, including reading from databases.
	    </para>
	    <para>
	      This command is actually the basis for almost all of
	      <application>skit</application>&apos;s built-in commands, and
	      the following shell commands are entirely equivalent:
	      <programlisting>
$ <application>skit</application> --generate --build mydb.xml

$ <application>skit</application> --template generate.xml --build mydb.xml
	      </programlisting>
	    </para>
	  </listitem>
	</varlistentry>
      
	<!-- print -->
	<varlistentry>
	  <term><arg choice="plain">-p</arg></term>
	  <term><arg choice="plain">--print</arg></term>
	  <listitem>
	    &print_options;
	    <para>
	      Print an <acronym>XML</acronym> stream to standard output.  By
	      default, the stream is interpreted allowing print streams to
	      be printed as pure text.
	    </para>
	    <para>
	      If a filename is provided to this command, the file will be
	      read and added to the stack before processing.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term><arg choice="plain">-pf</arg></term>
	  <term><arg choice="plain">--printfull</arg></term>
	  <listitem>
	    <para>
	      As <option>--print --full</option>.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term><arg choice="plain">-x</arg></term>
	  <term><arg choice="plain">--px</arg></term>
	  <term><arg choice="plain">--printxml</arg></term>
	  <listitem>
	    <para>
	      As <option>--print --xml</option>.
	    </para>
	  </listitem>
	</varlistentry>
	
	<!-- help -->
	<varlistentry>
	  <term><arg choice="plain">-h</arg></term>
	  <term><arg choice="plain">--help</arg></term>
	  <term><arg choice="plain">-u</arg></term>
	  <term><arg choice="plain">--usage</arg></term>
	  <listitem>
	    <variablelist>
	      <varlistentry>
		<term><arg choice="plain">--db</arg></term>
		<term><arg choice="plain">--dbtype</arg></term>
		<listitem>
		  <para>
		    Specify the type of database for which we are
		    looking for usage information.  This governs the
		    search path used by the 
		    <application>skit</application> engine for finding the
		    appropriate version of the usage description.
		    This defaults to <quote>postgres</quote>.
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><arg choice="plain">
		  -<replaceable>short-optionname</replaceable>
		</arg></term>
		<term><arg choice="plain">
		  --<replaceable>long-optionname</replaceable>
		</arg></term>
		<listitem>
		  <para>
		    Any of the major command options can be given here,
		    in long or short form, to select a more detailed
		    help message for that option.
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	    <para>
	      Provide a help message containing the command synopsis.
	      If an extra option is provided, provide more detailed help
	      for that specific option.
	    </para>
	  </listitem>
	</varlistentry>
      
	<!-- version -->
	<varlistentry>
	  <term><arg choice="plain">-v</arg></term>
	  <term><arg choice="plain">--version</arg></term>
	  <listitem>
	    <para>
	      Provide the version number of the
	      <application>skit</application> application.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </refsect1>
  
    <refsect1>
      <title>Exit Status</title>
    
      <para>
	<application>skit</application> returns 0 to the shell if it
	finished normally.  
      </para>
    </refsect1>
  
    <refsect1>
      <title>Supported Databases</title>
      
      <para>
	<application>Skit</application> currently supports the PostgreSQL
	<acronym>RDBMS</acronym>, versions 8.4 to 9.4.
      </para>
    </refsect1>
  </refentry>
</appendix>