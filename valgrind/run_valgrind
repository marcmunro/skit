#! /bin/sh
# Run valgrind memory tests against skit_test
# It will do this one test at a time from the file valgrind/alltests
# If args are given to the command only those tests that match the args
# will be run.

flagit()
{
    printf "PROBLEM DETECTED HERE>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
    print
}

check_output()
{
    awk ' 
        BEGIN {lost = 0; found = 0}
{print}
    	/==[0-9]*==.*lost: [1-9]/ {flagit; lost = 1}
    	/==[0-9]*==.*reachable: [1-9]/ {flagit; lost = 1}
    	/==[0-9]*==.*reachable: 0/ {flagit; found = 1}
	/==[0-9]*== FATAL/ {flagit; exit(2)}
	/^EXITSTAT:/ {if ($2 != 0) exit($2)}
	/[0-9]*%.* Errors: [1-9]/ {flagit; exit(2)}
	END {
	    if (lost) {
		exit(1)
	    }
	    else if (!found) {
		exit(3)
	    }
	}' -
}

do_test()
{
    echo ======== testing $1 $2 ============ >>valgrind.log

    (valgrind ${flags} ${cmd} ${cmd_flags} $1 $2 2>&1; echo "EXITSTAT: $?") | \
	tee -a valgrind.log | check_output >/dev/null
    this=$?
    if [ ${this} = 2 ]; then
        status=${this}
        echo "Error, FATAL: $1 $2 ${status}"
    elif [ ${this} = 3 ]; then
        status=${this}
        echo "Unknown: $1 $2 ${status}"
    elif [ ${this} != 0 ]; then
        status=${this}
        echo "Error: $1 $2 ${status}"
    else
        echo "Pass: $1 $2"
    fi
}

flags=""
while 
    case "x$1" in
        x-*)
	    flags="${flags} $1"
	    shift
	    true;;
        *)  false;;
    esac; do
  echo
done

cmd="$1"
shift

cmd_flags=""
while 
    case "x$1" in
        x-*)
	    cmd_flags="${cmd_flags} $1"
	    shift
	    true;;
        *)  false;;
    esac; do
  echo
done

if [ "x$2" != "x" ]; then
    do_test $1 $2
    exit $status
elif [ "x$1" != "x" ]; then
    grep_expr="^$1 "
else
    grep_expr="."
fi

grep ${grep_expr} valgrind/alltests | while read a b; do
    do_test $a $b
done
exit $status
