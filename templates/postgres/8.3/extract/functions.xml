<?xml version="1.0" encoding="UTF-8"?>

<skit:inclusion
   xmlns:skit="http://www.bloodnok.com/xml/skit"
   xmlns:xi="http://www.w3.org/2003/XInclude">

  <skit:foreach var="function" from="functions" 
		filter="(string= (select function 'schema')
			         (select schema 'name'))">
    <function>
      <skit:let>
      	<!-- To deal with the pathological case of a name containing a
      	     comma, we convert separating commas (those not in quotes) to
      	     DEL and then split on the DEL.  If a name contains a DEL
      	     we will be hosed.  -->
	<skit:var name="argnames"
		  expr="(split
      		          (replace  
      			    (or (select tuple 'all_argnames') '')
      			    '((&quot;(//.|[^&quot;])*&quot;)|([^&quot;,]*)),' 
      			    '\1&#x7F;') '&#x7F;'))"/>
      	<skit:var name="argnum" expr="0"/>
	<skit:var name="argtuple"/>
      	<skit:var name="argtypes" 
		  expr="(split (select tuple 'argtype_oids') ',')"/>
      	<skit:var name="argmodes" 
		  expr="(split (or (select tuple 'all_argmodes') '') ',')"/>
      	<skit:var name="otherfn"/> 
	<skit:var name="typoid" expr="(select tuple 'typoid')"/>

      	<skit:attr name="name"/>
      	<skit:attr name="schema"/>
      	<skit:attr name="owner"/>
      	<skit:attr name="language"/>
      	<skit:attr name="is_strict"/>
      	<skit:attr name="returns_set"/>
      	<skit:attr name="volatility"/>
      	<skit:attr name="security_definer"/>
      	<skit:attr name="bin"/>
      	<skit:attr name="privs"/>
      	<skit:attr name="cost"/>
	<skit:if test="typoid">
	  <handler-for-type>	
	    <skit:attr name="name"
		       expr="(select basetypes typoid 'name')"/>
	    <skit:attr name="schema"
		       expr="(select basetypes typoid 'schema')"/>
	  </handler-for-type>
	</skit:if>
	<skit:if test="(select function 'comment')">
	  <comment>
	    <skit:text expr="(select function 'comment')"/>
	  </comment>
	</skit:if>
      	<result>
	  <skit:let>
      	    <skit:var name="argtuple"
		      expr="(select alltypes 
			            (select tuple 'result_type_oid'))"/>
      	    <skit:attr name="type" expr="(select argtuple 'name')"/>
      	    <skit:attr name="schema" expr="(select argtuple 'schema')"/>
	  </skit:let>
      	</result>
      	<skit:if test="(select argtypes 0)">
      	  <params>
      	    <skit:foreach from="argtypes" var="arg" index="idx">
      	      <param>
		<skit:let>
      		  <skit:var name="argtuple" expr="(select alltypes arg)"/>
      		  <skit:attr name="type" expr="(select argtuple 'name')"/>
      		  <skit:attr name="schema" expr="(select argtuple 'schema')"/>
      		  <skit:attr name="name" expr="(select argnames (- idx 1))"/>
      		  <skit:attr name="mode" expr="(select argmodes (- idx 1))"/>
      		  <skit:attr name="position" expr="idx"/>
	        </skit:let>
      	      </param>
      	    </skit:foreach>
      	  </params>
      	</skit:if>
      	<skit:attr name="signature" 
      			 expr="(select function_sigs (select tuple 'oid'))"/>
	<!-- Type_handler function -->
	<skit:var name="otherfn"
		  expr="(select functions (select tuple 'type_handler_oid'))"/>
	<skit:attr name="type_handler_schema"
		   expr="(select otherfn 'schema')"/>
	<skit:attr name="type_handler_name"
		   expr="(select otherfn 'name')"/>
	<skit:attr name="type_handler_signature"
      		   expr="(select function_sigs 
			         (select tuple 'type_handler_oid'))"/>

	<!-- Type_input function -->
	<skit:var name="infn" expr="(select functions 
			               (select tuple 'type_input_oid')))"/>
	<skit:attr name="type_input_schema"
		   expr="(select infn 'schema')"/>
	<skit:attr name="type_input_name"
		   expr="(select infn 'name')"/>
	<skit:attr name="type_input_signature"
      		   expr="(select function_sigs 
			         (select tuple 'type_input_oid'))"/>

	<!-- Type_output function -->
	<skit:var name="outfn" expr="(select functions 
			               (select tuple 'type_output_oid'))"/>
	<skit:attr name="type_output_schema"
		   expr="(select outfn 'schema')"/>
	<skit:attr name="type_output_name"
		   expr="(select outfn 'name')"/>
	<skit:attr name="type_output_signature"
      		   expr="(select function_sigs 
			         (select tuple 'type_output_oid'))"/>

	<!-- Type_send function -->
	<skit:var name="sendfn" expr="(select functions 
			               (select tuple 'type_send_oid'))"/>
	<skit:attr name="type_send_schema"
		   expr="(select sendfn 'schema')"/>
	<skit:attr name="type_send_name"
		   expr="(select sendfn 'name')"/>
	<skit:attr name="type_send_signature"
      		   expr="(select function_sigs 
			         (select tuple 'type_send_oid'))"/>

	<!-- Type_receive function -->
	<skit:var name="recfn" expr="(select functions 
			               (select tuple 'type_receive_oid'))"/>
	<skit:attr name="type_receive_schema"
		   expr="(select recfn 'schema')"/>
	<skit:attr name="type_receive_name"
		   expr="(select recfn 'name')"/>
	<skit:attr name="type_receive_signature"
      		   expr="(select function_sigs 
			         (select tuple 'type_receive_oid'))"/>

	<!-- Type_analyze function -->
	<skit:var name="analfn" expr="(select functions 
			               (select tuple 'type_analyze_oid'))"/>
	<skit:attr name="type_analyze_schema"
		   expr="(select analfn 'schema')"/>
	<skit:attr name="type_analyze_name"
		   expr="(select analfn 'name')"/>
	<skit:attr name="type_analyze_signature"
      		   expr="(select function_sigs 
			         (select tuple 'type_analyze_oid'))"/>


      	<skit:attr name="type_input_oid"/>
      	<skit:attr name="type_output_oid"/>
      	<skit:attr name="type_receive_oid"/>
      	<skit:attr name="type_send_oid"/>
      	<skit:attr name="type_analyze_oid"/>
      	<source>
      	  <skit:text name="source"/>
      	</source>
      </skit:let>

      <skit:if test="(not (select tuple 'privs'))">
        <!-- No privileges defined for this function, so create
      	     default grants for the implicit privs -->
        <grant with_grant="yes" priv="execute" default="yes">
      	  <skit:attr name="from" field="owner"/>
      	  <skit:attr name="to" field="owner"/>
        </grant>
        <grant priv="execute" default="yes">
      	  <skit:attr name="from" field="owner"/>
      	  <skit:attr name="to" expr="'public'"/>
        </grant>
      </skit:if>
      <skit:exec_function name="grants_from_privs"
    			  privileges="(select tuple 'privs')"/>
    </function>
  </skit:foreach>
</skit:inclusion>  

