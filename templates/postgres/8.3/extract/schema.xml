<?xml version="1.0" encoding="UTF-8"?>

<skit:inclusion
   xmlns:skit="http://www.bloodnok.com/xml/skit"
   xmlns:xi="http://www.w3.org/2003/XInclude">

  <skit:runsql to="domains" file="sql/domains.sql"/>
  <skit:runsql to="constraints" file="sql/constraints.sql"/>
  <skit:runsql var="schema" file="sql/schemata.sql">
    <schema>
      <skit:attr name="name"/>
      <skit:attr name="owner"/>
      <skit:attr name="comment"/>

      <skit:if test="(not (select tuple 'privs'))">
	<grant with_grant="yes" priv="create">
	  <skit:attr name="from" field="owner"/>
	  <skit:attr name="to" field="owner"/>
	</grant>
	<grant with_grant="yes" priv="usage">
	  <skit:attr name="from" field="owner"/>
	  <skit:attr name="to" field="owner"/>
	</grant>
      </skit:if>
      <skit:exec_function name="grants_from_privs"
			  privileges="(select tuple 'privs')"/>

      <xi:include href="skitfile:extract/domains.xml"/>
    </schema>
  </skit:runsql>
  <skit:exec expr="(debug 'TODO: types, basetypes, composite types, constraints, functions, operators, operator classes, aggregates, sequences, tables' nil)"/>
</skit:inclusion>


  <skit:runsql var="alltypes" file="sql/alltypes.sql" hash="oid"/>
  <skit:runsql var="basetypes" file="sql/basetypes.sql" hash="oid"/>
  <skit:runsql var="comptypes" file="sql/comptypes.sql"/>
  <skit:runsql var="constraints" file="sql/constraints.sql"/>
  <skit:runsql var="functions" file="sql/functions.sql" hash="oid"/>
  <skit:runsql var="operators" file="sql/operators.sql"/>
  <skit:runsql var="operator_classes" file="sql/operator_classes.sql"/>
  <skit:runsql var="opclass_opers" file="sql/opclass_opers.sql"/>
  <skit:runsql var="opclass_funcs" file="sql/opclass_funcs.sql"/>
  <skit:runsql var="aggregates" file="sql/aggregate.sql"/>
  <skit:runsql var="sequences" file="sql/sequences.sql"/>
  <skit:runsql var="tables" file="sql/tables.sql"/>

  <skituls:foreach var="functions">
    <skituls:expr>
      <!-- Create signature and qname attributes for each function -->
      args = tuple['argtype_oids'].split      
      args.map! do |arg|
        type = Globals['alltypes'][arg]
        schema = type['schema']
        name = type['name']
        if schema == 'pg_catalog'
          name
        else
          schema + '.' + name
        end
      end
      sig = tuple['schema'] + '.' + tuple['name'] + '(' +
            args.join(',') + ')'
      tuple['signature'] = sig
      qname = '&quot;' + sig.gsub(/([\.,()])/, '&quot;\1&quot;') + '&quot;'
      tuple['qname'] = qname.gsub(/&quot;&quot;/, '')
    </skituls:expr>
  </skituls:foreach>

  <skituls:foreach var="schemas">
    <schema>
      
      <skituls:foreach var="domains"
		       filter="tuple['schema'] == tuple.parent['name']">
	<domain>
	  <skituls:foreach var="constraints"
			   filter="tuple['oid'] == tuple.parent['conoid']">
	    <constraint>
	      <skituls:attr field="name"/>
	      <skituls:attr field="schema"/>
	      <skituls:attr field="constraint_type"/>
	      <skituls:attr field="source"/>
	    </constraint>
	  </skituls:foreach>
	</domain>
      </skituls:foreach>

      <skituls:foreach var="comptypes"
		       filter="tuple['schema'] == tuple.parent['name']">
	<type>
	  <skituls:attr field="name"/>
	  <skituls:attr field="schema"/>
	  <skituls:attr field="type"/>
	  <skituls:attr field="owner"/>
	  <skituls:attr field="comment"/>
	  <skituls:runsql var="typcolumns" file="sql/type_columns.sql"
			  param_1="tuple['reloid']">
	    <column>
	      <skituls:copytuple/>
	    </column>
	  </skituls:runsql>
	</type>
      </skituls:foreach>
	  
      <!-- Note: basetypes are post-processed into types by 
	   post_extract.xsl -->
      <skituls:foreach var="basetypes"
		       filter="tuple['schema'] == tuple.parent['name']">
	<basetype>
	  <skituls:copytuple/>
	</basetype>
      </skituls:foreach>
	    
      <skituls:foreach var="functions"
      		 filter="tuple['schema'] == tuple.parent['name']">
        <function>	
          <skituls:attr field="name"/>
          <skituls:attr field="schema"/>
          <skituls:attr field="owner"/>
          <skituls:attr field="language"/>
          <skituls:attr field="security_definer"/>
          <skituls:attr field="is_strict"/>
          <skituls:attr field="returns_set"/>
          <skituls:attr field="volatility"/>
          <skituls:attr field="argtypes"/>
          <skituls:attr field="bin"/>
          <skituls:attr field="privs"/>
          <skituls:attr field="comment"/>
          <skituls:attr field="signature"/>
          <skituls:attr field="qname"/>   <!-- TODO: Remove this -->
          <skituls:attr field="oid"/>	  <!-- TODO: Remove this -->
          
          <!-- Figure out parameter information -->
          <skituls:expr>
            args = tuple['argtype_oids'].split
            modes, names = nil, nil
            if x = tuple['all_argmodes']
              modes = x.gsub(/[{}]/, "").split(',')
            end
            if x = tuple['all_argnames']
              names = x.gsub(/[{}]/, "").split(',')
            end
            params = []
            for i in 0 .. (args.length - 1)
              param = {}
              SkitTuple.maketuple(param)  ## TODO: Refactor this away!
              oid = args[i]
              type = Globals['alltypes'][oid]
              param['position'] = (i + 1).to_s
              param['type_name'] = type['name']
              param['type_schema'] = type['schema']
              param['mode'] = 
                if modes
                  case modes[i]
                  when 'i' then 'in' 
                  when 'b' then 'inout'
                  else 'out' 
                  end
                else
                  'in'
                end
              if names then param['name'] = names[i] end
              params[i] = param
            end
            res_oid = tuple['result_type_oid']
            restype = Globals['alltypes'][res_oid]
            Globals['result'] = restype
            Globals['params'] = params
          </skituls:expr>

          <skituls:foreach var="params">
            <param>
      	      <skituls:copytuple/>
            </param>
          </skituls:foreach>  
          <result>
            <skituls:attr id="type_schema" 
      		    expr="Globals['result']['schema']"/>
            <skituls:attr id="type_name" expr="Globals['result']['name']"/>
            <skituls:if test="tuple['returns_set']">
      	      <skituls:attr field="returns_set"/>
            </skituls:if>
          </result>
      		  
          <!-- If this function is a handler for a user-defined type -->
          <skituls:if test="tuple['type_handler_oid']">
            <skituls:expr>
      	      oid = tuple['oid']
      	      input_oid = tuple['type_input_oid']
      	      output_oid = tuple['type_output_oid']
      	      if input_oid == oid
      	        follows_fn = nil
      	      elsif output_oid == oid
      	        follows_fn = Globals['functions'][input_oid]['signature']
      	      else
      	        follows_fn = Globals['functions'][output_oid]['signature']
      	      end
      	      type_oid = tuple['type_handler_oid']
                    type = Globals['alltypes'][type_oid]
      	      tuple['type_schema'] = type['schema']
      	      tuple['type_name'] = type['name']
            </skituls:expr>
            <handler_for>
      	      <skituls:attr field="following_schema"/>
      	      <skituls:attr field="following"/>
      	      <skituls:attr field="type_schema"/>
      	      <skituls:attr field="type_name"/>
            </handler_for>
          </skituls:if>

          <source>
            <skituls:text field="source"/>
          </source>

          <skituls:if test="!tuple['privs']">
            <!-- No privileges defined for this function, so create
      	   grants for the implicit privs -->
            <grant with_grant="yes" priv="execute">
      	      <skituls:attr id="from" field_expr="#{owner}"/>
      	      <skituls:attr id="to" field_expr="#{owner}"/>
            </grant>
          </skituls:if>
          <skituls:foreach split="privs">
            <skituls:pg_eachpriv field="privs" 
      			   toname="to" privname="priv" fromname="from"
      			   withname="with_grant">
      	      <grant>
      		<skituls:if test="tuple['to'] == tuple['from']">
      		  <!-- If this is the implied grant to the owner,
      		       then they have with_grant="yes" -->
      		  <skituls:attr id="with_grant" expr="'yes'"/>
      		</skituls:if>
      		<skituls:if test="tuple['to'] != tuple['from']">
      		  <skituls:attr field="with_grant"/>
      		</skituls:if>
      		<skituls:attr field="priv"/>
      		<skituls:attr field="from"/>
      		<skituls:attr field="to"/>
      	      </grant>
            </skituls:pg_eachpriv>
          </skituls:foreach>
        </function>
      </skituls:foreach>

      <skituls:foreach var="operators"
      		 filter="tuple['schema'] == tuple.parent['name']">
        <skituls:expr>
          <!-- Create signature and params attributes -->
          params = '(' + tuple['leftarg_schema'] + '.' + tuple['leftarg'] + 
                   ',' + tuple['rightarg_schema'] + '.' + 
                   tuple['rightarg'] + ')'
          sig = tuple['schema'] + '.' + tuple['name'] + params
          tuple['params'] = params
          tuple['signature'] = sig
          if (oid = tuple['procedure_oid']) and (oid != '0')
            if func = Globals['functions'][oid]
              tuple['procedure_signature'] = func['signature']
            else
              raise "NO SIG FN FOR #{oid}, TYPE #{tuple['name']}"
            end
          end
          if (oid = tuple['restrict_oid']) and (oid != '0')
            if func = Globals['functions'][oid]
              tuple['restrict_signature'] = func['signature']
            else
              raise "NO SIG FN FOR #{oid}, TYPE #{tuple['name']}"
            end
          end
          if (oid = tuple['join_oid']) and (oid != '0')
            if func = Globals['functions'][oid]
              tuple['join_signature'] = func['signature']
            else
              raise "NO SIG FN FOR #{oid}, TYPE #{tuple['name']}"
            end
          end
        </skituls:expr>

        <operator>
          <skituls:copytuple/>
        </operator>
      </skituls:foreach>
	  
      <!-- The following stylesheet call formats parameters and
	   generates sql lookups for converting type oids to names. -->
      
      <skituls:foreach var="aggregates"
		       filter="tuple['schema'] == tuple.parent['name']">

	<skituls:expr>
	  <!-- Create signature attributes -->
	  if oid = tuple['trans_oid']
	    if oid != '0'
	      if func = Globals['functions'][oid]
	        tuple['transition_signature'] = func['signature']
	      else
	        raise "NO SIG FN FOR #{oid}, AGGREGATE #{tuple['name']}"
	      end
            end
	  end
	  if oid = tuple['final_oid']
	    if oid != '0'
	      if func = Globals['functions'][oid]
	        tuple['final_signature'] = func['signature']
	      else
	        raise "NO SIG FN FOR #{oid}, AGGREGATE #{tuple['name']}"
	      end
	    end
	  end
	</skituls:expr>
	<aggregate>	
	  <skituls:copytuple/>
	</aggregate>
      </skituls:foreach>

      <skituls:foreach var="operator_classes"
		       filter="tuple['schema'] == tuple.parent['name']">
	<operator_class>
	  <skituls:copytuple/>
	  <skituls:foreach var="opclass_opers"
			   filter="tuple['opclass_oid'] == tuple.parent['oid']">
	    <opclass_oper>
	      <skituls:attr field='strategy'/>
	      <skituls:attr field='op_name'/>
	      <skituls:attr field='op_schema'/>
	      <skituls:attr field='op_leftarg_name'/>
	      <skituls:attr field='op_leftarg_schema'/>
	      <skituls:attr field='op_rightarg_name'/>
	      <skituls:attr field='op_rightarg_schema'/>
	    </opclass_oper>
	  </skituls:foreach>
	  <skituls:foreach var="opclass_funcs"
			   filter="tuple['opclass_oid'] == tuple.parent['oid']">
	    <skituls:expr>
	      proc_oid = tuple['proc_oid']
	      func = Globals['functions'][proc_oid]
	      tuple['function_signature'] = sig = func['signature']
	      tuple['function_qname'] = sig_to_qname(sig)
	    </skituls:expr>
	    <opclass_func>
	      <skituls:copytuple/>
	      <!-- <skituls:attr id="proc_num" field="proc_num"/>
	      <skituls:attr id="proc_oid" field="proc_oid"/> -->
	    </opclass_func>
	  </skituls:foreach>
	</operator_class>
      </skituls:foreach>
	  
      <skituls:foreach var="sequences"
		       filter="tuple['schema'] == tuple.parent['name']">
	<skituls:expr>
	  sig = tuple['schema'] + '.' + tuple['name']
	  tuple['qname'] = sig_to_qname(sig)
	</skituls:expr>
	<sequence>
	  <skituls:attribute field="name"/>
	  <skituls:attribute field="schema"/>
	  <skituls:attribute field="owner"/>
	  <skituls:attribute field="comment"/>
	  <skituls:attribute field="privs"/>
	  <skituls:runsql var="seq_attributes" file="sql/sequence_cols.sql"
			  param_1="tuple['qname']">
	    <skituls:attribute field="start_with"/>
	    <skituls:attribute field="increment_by"/>
	    <skituls:attribute field="max_value"/>
	    <skituls:attribute field="min_value"/>
	    <skituls:attribute field="cache"/>
	    <skituls:attribute field="is_cycled"/>
	  </skituls:runsql>
          <skituls:if test="!tuple['privs']">
	    <grant with_grant="yes" priv="trigger">
	      <skituls:attr id="from" field_expr="#{owner}"/>
	      <skituls:attr id="to" field_expr="#{owner}"/>
	    </grant>
	    <grant with_grant="yes" priv="references">
	      <skituls:attr id="from" field_expr="#{owner}"/>
	      <skituls:attr id="to" field_expr="#{owner}"/>
	    </grant>
	    <grant with_grant="yes" priv="rule">
	      <skituls:attr id="from" field_expr="#{owner}"/>
	      <skituls:attr id="to" field_expr="#{owner}"/>
	    </grant>
	    <grant with_grant="yes" priv="delete">
	      <skituls:attr id="from" field_expr="#{owner}"/>
	      <skituls:attr id="to" field_expr="#{owner}"/>
	    </grant>
	    <grant with_grant="yes" priv="insert">
	      <skituls:attr id="from" field_expr="#{owner}"/>
	      <skituls:attr id="to" field_expr="#{owner}"/>
	    </grant>
	    <grant with_grant="yes" priv="select">
	      <skituls:attr id="from" field_expr="#{owner}"/>
	      <skituls:attr id="to" field_expr="#{owner}"/>
	    </grant>
	    <grant with_grant="yes" priv="update">
	      <skituls:attr id="from" field_expr="#{owner}"/>
	      <skituls:attr id="to" field_expr="#{owner}"/>
	    </grant>
	  </skituls:if>
          <skituls:foreach split="privs">
            <skituls:pg_eachpriv field="privs" 
      			   toname="to" privname="priv" fromname="from"
      			   withname="with_grant">
	      <grant>
      		<skituls:if test="tuple['to'] == tuple['from']">
      		  <!-- If this is the implied grant to the owner,
      		       then they have with_grant="yes" -->
      		  <skituls:attr id="with_grant" expr="'yes'"/>
      		</skituls:if>
      		<skituls:if test="tuple['to'] != tuple['from']">
      		  <skituls:attr field="with_grant"/>
      		</skituls:if>
      		<skituls:attr field="priv"/>
      		<skituls:attr field="from"/>
      		<skituls:attr field="to"/>
	      </grant>
	    </skituls:pg_eachpriv>
	  </skituls:foreach>
	</sequence>
      </skituls:foreach>

      <skituls:include file="extract/tables.xml"/>
    </schema>
  </skituls:foreach>


<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
