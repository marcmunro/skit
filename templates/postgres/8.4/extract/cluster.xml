<?xml version="1.0" encoding="UTF-8"?>

<skit:inclusion
   xmlns:skit="http://www.bloodnok.com/xml/skit"
   xmlns:xi="http://www.w3.org/2003/XInclude">
  <cluster type="postgres">
    <skit:let>
      <!-- Create a hash of privilege names keyed by the characters
	   returned from queries on aclitem[] columns -->
      <skit:var name="privnames" 
		expr="&lt;('r' . 'select')
		          ('w' . 'update')
		          ('a' . 'insert')
		          ('d' . 'delete')
		          ('D' . 'truncate')
		          ('x' . 'references')
		          ('t' . 'trigger')
		          ('X' . 'execute')
		          ('U' . 'usage')
		          ('C' . 'create')
		          ('c' . 'connect')
		          ('T' . 'temporary')
		      &gt;"/>
      <skit:var name="privchars" 
		expr="&lt;('select'     . 'r')
		          ('update'     . 'w')
		          ('insert'     . 'a')
		          ('delete'     . 'd')
		          ('truncate'   . 'D')
		          ('references' . 'x')
		          ('trigger'    . 't')
		          ('execute'    . 'X')
		          ('usage'      . 'U')
		          ('create'     . 'C')
		          ('connect'    . 'c')
		          ('temporary'  . 'T')
		      &gt;"/>

      <skit:function name="grants_from_privs">
	<skit:parameter name="privileges"/>
	<skit:parameter name="automatic"/>
	<skit:parameter name="owner"/>

	<skit:if test="(not privileges)">
	  <!-- If no privs, then generate the default, automatic grants -->
	  <skit:foreach from="automatic" var="this">
	    <skit:var name="privs" expr="(cdr this)"/>
	    <skit:foreach from="privs" var="priv">
	      <grant>
		<skit:attr name="from" expr="owner"/>
		<skit:attr name="to" expr="(car this)"/>
		<skit:attr name="with_grant" expr="'no'"/>
		<skit:attr name="priv" expr="priv"/>
		<skit:attr name="automatic" expr="'yes'"/>
	      </grant>
	    </skit:foreach>
	  </skit:foreach>
	</skit:if>

	<skit:if test="privileges">
	  <!-- The first regexp below adds an explicit public string
	       wherever there is an implicit (empty one).  The second
	       regexp removes the braces around the privileges string.
	       The third one reverses the order of characters followed
	       by asterisks and adds a space so that the asterisk
	       precedes the character it previously followed, and the
	       expression becomes splittable around space characters.
	    -->
	  <skit:var name="privs_list"
		    expr="(split (replace 
			            (replace (replace privileges 
				               /([{,])=/ '\1public=')
				      /\\{(.*)\\}/ '\1') 
				    /(.)\\*/ '*\1 ')
		                  ',')"/>

	  <!-- Identify any grants that should have been provided
	       automatically, but have not been. -->
	  <skit:foreach from="automatic" var="this">
	    <skit:var name="to" expr="(car this)"/>
	    <skit:var name="privset" 
		      expr="(select privs_list 
			              (re (concat to '=.*/' owner)))"/>
	    <!-- Check whether all expected automatic privs are present,
		 creating revokes for any that are not. -->
	      
	    <skit:var name="granted" expr="(replace (or privset '')
					   /.*=([A-Za-z]*).*/ '\1')"/>
	    <skit:foreach expr="(cdr this)" var="actual">
	      <skit:if test="(not (string-match 
			           (re (select privchars actual)) granted))">
		
		<!--
		<skit:exec expr="(debug 'AUTOMATIC' automatic)"/>
		<skit:exec expr="(debug 'PRIVILEGES' privileges)"/>
		<skit:exec expr="(debug 'PRIVS_LIST' privs_list)"/>
		<skit:exec expr="(debug 'PRIVSET' privset)"/>
		<skit:exec expr="(debug 'PRIVCHARS' privchars)"/>
		<skit:exec expr="(debug 'ACTUAL' actual)"/>
		<skit:exec expr="(debug 'GRANTED' granted)"/>
		-->
		<grant>
		  <skit:attr name="from" expr="owner"/>
		  <skit:attr name="to" expr="to"/>
		  <skit:attr name="priv" expr="actual"/>
		  <skit:attr name="automatic" expr="'revoke'"/>
		</grant>
	      </skit:if>
	    </skit:foreach>
	  </skit:foreach>

	  <skit:foreach from="privs_list" var="privs_str">
	    <skit:let>
	      <skit:var name="privinfo" expr="(split privs_str '/=')"/>
	      <skit:var name="to" expr="(select privinfo 0)"/>
	      <skit:var name="privs" 
			expr="(split (select privinfo 1) ' ')"/>
	      <skit:var name="from" expr="(select privinfo 2)"/>
	      <skit:foreach from="privs" var="these_privs">
		<skit:let>
		  <skit:var name="with_grant" expr="'no'"/>
		  <skit:var name="privname"/>
		  <skit:foreach from="these_privs" var="this_priv">
		    <skit:if test="(string= this_priv '*')">
		      <skit:exec expr="(setq with_grant 'yes')"/>
		    </skit:if>
		    <skit:if test="(not (string= this_priv '*'))">
		      <grant>
			<skit:exec expr="(setq privname 
					   (select privnames this_priv))"/>
			<skit:attr name="from" expr="from"/>
			<skit:attr name="to" expr="to"/>
			<skit:attr name="with_grant" expr="with_grant"/>
			<skit:attr name="priv" expr="privname"/>

			<skit:if test="(select automatic to)">
			  <skit:attr name="automatic" expr="'maybe'"/>
			</skit:if>
			<skit:if test="(not (select automatic to))">
			  <skit:attr name="automatic" expr="'no'"/>
			</skit:if>
		      </grant>
		    </skit:if>
		  </skit:foreach>
		</skit:let>
	      </skit:foreach>
	    </skit:let>
	  </skit:foreach>
	</skit:if>
      </skit:function>
	
      <skit:function name="type_handler">
	<skit:parameter name="oid"/>
	<skit:parameter name="type"/>
	<skit:if test="oid">
	  <skit:let>
	    <skit:var name="function" expr="(select functions oid)"/>
	    <skit:if test="(select function 'name')">
	      <handler-function>
		<skit:attr name="type" expr="type"/>
		<skit:attr name="name" expr="(select function 'name')"/>
		<skit:attr name="schema" expr="(select function 'schema')"/>
		<skit:attr name="signature" expr="(select function_sigs oid)"/>
	      </handler-function>
	    </skit:if>
	  </skit:let>
	</skit:if>
      </skit:function>
		     
      <!-- An example of a skit debug call -->
      <!-- <skit:exec expr="(debug 'PRIVNAMES' privnames)"/> -->
      <skit:attr name="port" expr="port"/>
      <skit:attr name="version"/>
      <skit:attr name="host" expr="host"/>
      <skit:attr name="skit_xml_version" expr="skit_xml_version"/>

      <skit:runsql file="sql/dbinfo.sql" var="dbinfo">
	<skit:attr name="username"/>
	<xi:include href="skitfile:extract/roles.xml"/>
	<xi:include href="skitfile:extract/tablespaces.xml"/>
	<xi:include href="skitfile:extract/database.xml"/>
      </skit:runsql>
    </skit:let>
  </cluster>
</skit:inclusion>  

